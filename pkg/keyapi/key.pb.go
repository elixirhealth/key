// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/keyapi/key.proto

/*
Package keyapi is a generated protocol buffer package.

It is generated from these files:
	pkg/keyapi/key.proto

It has these top-level messages:
	AddPublicKeysRequest
	AddPublicKeysResponse
	GetPublicKeyDetailsRequest
	GetPublicKeyDetailsResponse
	GetPublicKeysRequest
	GetPublicKeysResponse
	SamplePublicKeysRequest
	SamplePublicKeysResponse
	PublicKeyDetail
*/
package keyapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type KeyType int32

const (
	KeyType_AUTHOR KeyType = 0
	KeyType_READER KeyType = 1
)

var KeyType_name = map[int32]string{
	0: "AUTHOR",
	1: "READER",
}
var KeyType_value = map[string]int32{
	"AUTHOR": 0,
	"READER": 1,
}

func (x KeyType) String() string {
	return proto.EnumName(KeyType_name, int32(x))
}
func (KeyType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AddPublicKeysRequest struct {
	EntityId   string   `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	KeyType    KeyType  `protobuf:"varint,2,opt,name=key_type,json=keyType,enum=keyapi.KeyType" json:"key_type,omitempty"`
	PublicKeys [][]byte `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (m *AddPublicKeysRequest) Reset()                    { *m = AddPublicKeysRequest{} }
func (m *AddPublicKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*AddPublicKeysRequest) ProtoMessage()               {}
func (*AddPublicKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddPublicKeysRequest) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *AddPublicKeysRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_AUTHOR
}

func (m *AddPublicKeysRequest) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type AddPublicKeysResponse struct {
}

func (m *AddPublicKeysResponse) Reset()                    { *m = AddPublicKeysResponse{} }
func (m *AddPublicKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*AddPublicKeysResponse) ProtoMessage()               {}
func (*AddPublicKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetPublicKeyDetailsRequest struct {
	PublicKeys [][]byte `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (m *GetPublicKeyDetailsRequest) Reset()                    { *m = GetPublicKeyDetailsRequest{} }
func (m *GetPublicKeyDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeyDetailsRequest) ProtoMessage()               {}
func (*GetPublicKeyDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetPublicKeyDetailsRequest) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type GetPublicKeyDetailsResponse struct {
	PublicKeyDetails []*PublicKeyDetail `protobuf:"bytes,1,rep,name=public_key_details,json=publicKeyDetails" json:"public_key_details,omitempty"`
}

func (m *GetPublicKeyDetailsResponse) Reset()                    { *m = GetPublicKeyDetailsResponse{} }
func (m *GetPublicKeyDetailsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeyDetailsResponse) ProtoMessage()               {}
func (*GetPublicKeyDetailsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPublicKeyDetailsResponse) GetPublicKeyDetails() []*PublicKeyDetail {
	if m != nil {
		return m.PublicKeyDetails
	}
	return nil
}

type GetPublicKeysRequest struct {
	EntityId string  `protobuf:"bytes,1,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	KeyType  KeyType `protobuf:"varint,2,opt,name=key_type,json=keyType,enum=keyapi.KeyType" json:"key_type,omitempty"`
}

func (m *GetPublicKeysRequest) Reset()                    { *m = GetPublicKeysRequest{} }
func (m *GetPublicKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeysRequest) ProtoMessage()               {}
func (*GetPublicKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetPublicKeysRequest) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *GetPublicKeysRequest) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_AUTHOR
}

type GetPublicKeysResponse struct {
	PublicKeys [][]byte `protobuf:"bytes,3,rep,name=public_keys,json=publicKeys,proto3" json:"public_keys,omitempty"`
}

func (m *GetPublicKeysResponse) Reset()                    { *m = GetPublicKeysResponse{} }
func (m *GetPublicKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPublicKeysResponse) ProtoMessage()               {}
func (*GetPublicKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetPublicKeysResponse) GetPublicKeys() [][]byte {
	if m != nil {
		return m.PublicKeys
	}
	return nil
}

type SamplePublicKeysRequest struct {
	OfEntityId        string `protobuf:"bytes,1,opt,name=of_entity_id,json=ofEntityId" json:"of_entity_id,omitempty"`
	RequesterEntityId string `protobuf:"bytes,2,opt,name=requester_entity_id,json=requesterEntityId" json:"requester_entity_id,omitempty"`
	NPublicKeys       uint32 `protobuf:"varint,3,opt,name=n_public_keys,json=nPublicKeys" json:"n_public_keys,omitempty"`
}

func (m *SamplePublicKeysRequest) Reset()                    { *m = SamplePublicKeysRequest{} }
func (m *SamplePublicKeysRequest) String() string            { return proto.CompactTextString(m) }
func (*SamplePublicKeysRequest) ProtoMessage()               {}
func (*SamplePublicKeysRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SamplePublicKeysRequest) GetOfEntityId() string {
	if m != nil {
		return m.OfEntityId
	}
	return ""
}

func (m *SamplePublicKeysRequest) GetRequesterEntityId() string {
	if m != nil {
		return m.RequesterEntityId
	}
	return ""
}

func (m *SamplePublicKeysRequest) GetNPublicKeys() uint32 {
	if m != nil {
		return m.NPublicKeys
	}
	return 0
}

type SamplePublicKeysResponse struct {
	PublicKeyDetails []*PublicKeyDetail `protobuf:"bytes,1,rep,name=public_key_details,json=publicKeyDetails" json:"public_key_details,omitempty"`
}

func (m *SamplePublicKeysResponse) Reset()                    { *m = SamplePublicKeysResponse{} }
func (m *SamplePublicKeysResponse) String() string            { return proto.CompactTextString(m) }
func (*SamplePublicKeysResponse) ProtoMessage()               {}
func (*SamplePublicKeysResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SamplePublicKeysResponse) GetPublicKeyDetails() []*PublicKeyDetail {
	if m != nil {
		return m.PublicKeyDetails
	}
	return nil
}

type PublicKeyDetail struct {
	PublicKey []byte  `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	EntityId  string  `protobuf:"bytes,2,opt,name=entity_id,json=entityId" json:"entity_id,omitempty"`
	KeyType   KeyType `protobuf:"varint,3,opt,name=key_type,json=keyType,enum=keyapi.KeyType" json:"key_type,omitempty"`
}

func (m *PublicKeyDetail) Reset()                    { *m = PublicKeyDetail{} }
func (m *PublicKeyDetail) String() string            { return proto.CompactTextString(m) }
func (*PublicKeyDetail) ProtoMessage()               {}
func (*PublicKeyDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *PublicKeyDetail) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *PublicKeyDetail) GetEntityId() string {
	if m != nil {
		return m.EntityId
	}
	return ""
}

func (m *PublicKeyDetail) GetKeyType() KeyType {
	if m != nil {
		return m.KeyType
	}
	return KeyType_AUTHOR
}

func init() {
	proto.RegisterType((*AddPublicKeysRequest)(nil), "keyapi.AddPublicKeysRequest")
	proto.RegisterType((*AddPublicKeysResponse)(nil), "keyapi.AddPublicKeysResponse")
	proto.RegisterType((*GetPublicKeyDetailsRequest)(nil), "keyapi.GetPublicKeyDetailsRequest")
	proto.RegisterType((*GetPublicKeyDetailsResponse)(nil), "keyapi.GetPublicKeyDetailsResponse")
	proto.RegisterType((*GetPublicKeysRequest)(nil), "keyapi.GetPublicKeysRequest")
	proto.RegisterType((*GetPublicKeysResponse)(nil), "keyapi.GetPublicKeysResponse")
	proto.RegisterType((*SamplePublicKeysRequest)(nil), "keyapi.SamplePublicKeysRequest")
	proto.RegisterType((*SamplePublicKeysResponse)(nil), "keyapi.SamplePublicKeysResponse")
	proto.RegisterType((*PublicKeyDetail)(nil), "keyapi.PublicKeyDetail")
	proto.RegisterEnum("keyapi.KeyType", KeyType_name, KeyType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Key service

type KeyClient interface {
	AddPublicKeys(ctx context.Context, in *AddPublicKeysRequest, opts ...grpc.CallOption) (*AddPublicKeysResponse, error)
	GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error)
	SamplePublicKeys(ctx context.Context, in *SamplePublicKeysRequest, opts ...grpc.CallOption) (*SamplePublicKeysResponse, error)
	GetPublicKeyDetails(ctx context.Context, in *GetPublicKeyDetailsRequest, opts ...grpc.CallOption) (*GetPublicKeyDetailsResponse, error)
}

type keyClient struct {
	cc *grpc.ClientConn
}

func NewKeyClient(cc *grpc.ClientConn) KeyClient {
	return &keyClient{cc}
}

func (c *keyClient) AddPublicKeys(ctx context.Context, in *AddPublicKeysRequest, opts ...grpc.CallOption) (*AddPublicKeysResponse, error) {
	out := new(AddPublicKeysResponse)
	err := grpc.Invoke(ctx, "/keyapi.Key/AddPublicKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) GetPublicKeys(ctx context.Context, in *GetPublicKeysRequest, opts ...grpc.CallOption) (*GetPublicKeysResponse, error) {
	out := new(GetPublicKeysResponse)
	err := grpc.Invoke(ctx, "/keyapi.Key/GetPublicKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) SamplePublicKeys(ctx context.Context, in *SamplePublicKeysRequest, opts ...grpc.CallOption) (*SamplePublicKeysResponse, error) {
	out := new(SamplePublicKeysResponse)
	err := grpc.Invoke(ctx, "/keyapi.Key/SamplePublicKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyClient) GetPublicKeyDetails(ctx context.Context, in *GetPublicKeyDetailsRequest, opts ...grpc.CallOption) (*GetPublicKeyDetailsResponse, error) {
	out := new(GetPublicKeyDetailsResponse)
	err := grpc.Invoke(ctx, "/keyapi.Key/GetPublicKeyDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Key service

type KeyServer interface {
	AddPublicKeys(context.Context, *AddPublicKeysRequest) (*AddPublicKeysResponse, error)
	GetPublicKeys(context.Context, *GetPublicKeysRequest) (*GetPublicKeysResponse, error)
	SamplePublicKeys(context.Context, *SamplePublicKeysRequest) (*SamplePublicKeysResponse, error)
	GetPublicKeyDetails(context.Context, *GetPublicKeyDetailsRequest) (*GetPublicKeyDetailsResponse, error)
}

func RegisterKeyServer(s *grpc.Server, srv KeyServer) {
	s.RegisterService(&_Key_serviceDesc, srv)
}

func _Key_AddPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).AddPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyapi.Key/AddPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).AddPublicKeys(ctx, req.(*AddPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_GetPublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).GetPublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyapi.Key/GetPublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).GetPublicKeys(ctx, req.(*GetPublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_SamplePublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SamplePublicKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).SamplePublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyapi.Key/SamplePublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).SamplePublicKeys(ctx, req.(*SamplePublicKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Key_GetPublicKeyDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPublicKeyDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyServer).GetPublicKeyDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keyapi.Key/GetPublicKeyDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyServer).GetPublicKeyDetails(ctx, req.(*GetPublicKeyDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Key_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keyapi.Key",
	HandlerType: (*KeyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPublicKeys",
			Handler:    _Key_AddPublicKeys_Handler,
		},
		{
			MethodName: "GetPublicKeys",
			Handler:    _Key_GetPublicKeys_Handler,
		},
		{
			MethodName: "SamplePublicKeys",
			Handler:    _Key_SamplePublicKeys_Handler,
		},
		{
			MethodName: "GetPublicKeyDetails",
			Handler:    _Key_GetPublicKeyDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/keyapi/key.proto",
}

func init() { proto.RegisterFile("pkg/keyapi/key.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x41, 0x8f, 0x9a, 0x40,
	0x14, 0x76, 0x20, 0x71, 0xd7, 0xa7, 0x76, 0xe9, 0xac, 0x1b, 0x09, 0x5b, 0x23, 0x9d, 0x5e, 0x88,
	0x07, 0x9a, 0xd8, 0x4b, 0x2f, 0x3d, 0x98, 0x48, 0xda, 0xc6, 0xa4, 0x6d, 0xa6, 0x36, 0x3d, 0x52,
	0x2c, 0x63, 0x43, 0xb0, 0x30, 0x15, 0x3c, 0xcc, 0xad, 0xff, 0xa0, 0x7f, 0xb1, 0x3f, 0x65, 0x03,
	0x08, 0x08, 0xa2, 0x5e, 0x3c, 0x31, 0x99, 0xf7, 0xbd, 0xef, 0xfb, 0xde, 0xbc, 0xf7, 0x80, 0x01,
	0xf7, 0x7f, 0xbd, 0xf6, 0x99, 0x70, 0xb8, 0x97, 0x7c, 0x4c, 0xbe, 0x0d, 0xe3, 0x10, 0xb7, 0xb3,
	0x1b, 0xf2, 0x17, 0xc1, 0x60, 0xe6, 0xba, 0x5f, 0x76, 0xab, 0x8d, 0xf7, 0x73, 0xc1, 0x44, 0x44,
	0xd9, 0x9f, 0x1d, 0x8b, 0x62, 0xfc, 0x08, 0x1d, 0x16, 0xc4, 0x5e, 0x2c, 0x6c, 0xcf, 0x55, 0x91,
	0x8e, 0x8c, 0x0e, 0xbd, 0xcd, 0x2e, 0x3e, 0xba, 0x78, 0x02, 0xb7, 0x3e, 0x13, 0x76, 0x2c, 0x38,
	0x53, 0x25, 0x1d, 0x19, 0xcf, 0xa6, 0x77, 0x66, 0x46, 0x68, 0x2e, 0x98, 0x58, 0x0a, 0xce, 0xe8,
	0x8d, 0x9f, 0x1d, 0xf0, 0x18, 0xba, 0x3c, 0x65, 0xb7, 0x7d, 0x26, 0x22, 0x55, 0xd6, 0x65, 0xa3,
	0x47, 0x81, 0x17, 0x82, 0x64, 0x08, 0x0f, 0x35, 0x07, 0x11, 0x0f, 0x83, 0x88, 0x91, 0x77, 0xa0,
	0xbd, 0x67, 0x71, 0x11, 0x98, 0xb3, 0xd8, 0xf1, 0x36, 0x85, 0xc1, 0x8b, 0xbc, 0x2e, 0x3c, 0x36,
	0xa6, 0x67, 0xec, 0xd8, 0x02, 0x5c, 0xe6, 0xdb, 0x6e, 0x16, 0x55, 0x91, 0x2e, 0x1b, 0xdd, 0xe9,
	0x30, 0xaf, 0xa6, 0x96, 0x4d, 0x15, 0x5e, 0xa3, 0x23, 0x36, 0x0c, 0x0e, 0x55, 0xae, 0xfe, 0x7e,
	0xe4, 0x2d, 0x3c, 0xd4, 0x04, 0xf6, 0x05, 0x5c, 0x7c, 0x80, 0x7f, 0x08, 0x86, 0x5f, 0x9d, 0xdf,
	0x7c, 0xc3, 0x8e, 0xed, 0xe9, 0xd0, 0x0b, 0xd7, 0x76, 0xdd, 0x21, 0x84, 0x6b, 0x2b, 0xf7, 0x68,
	0xc2, 0xfd, 0x36, 0x03, 0xb3, 0xed, 0x01, 0x50, 0x4a, 0x81, 0xcf, 0x8b, 0x50, 0x81, 0x27, 0xd0,
	0x0f, 0xec, 0xaa, 0x21, 0x64, 0xf4, 0x69, 0x37, 0x28, 0xc5, 0x89, 0x03, 0xea, 0xb1, 0xa1, 0xeb,
	0xf6, 0x43, 0xc0, 0x5d, 0x0d, 0x84, 0x47, 0x00, 0x25, 0x73, 0x5a, 0x69, 0x8f, 0x76, 0x8a, 0xc4,
	0x6a, 0xa7, 0xa4, 0x33, 0x9d, 0x92, 0xcf, 0x77, 0x6a, 0xf2, 0x12, 0x6e, 0xf6, 0x77, 0x18, 0xa0,
	0x3d, 0xfb, 0xb6, 0xfc, 0xf0, 0x99, 0x2a, 0xad, 0xe4, 0x4c, 0xad, 0xd9, 0xdc, 0xa2, 0x0a, 0x9a,
	0xfe, 0x97, 0x40, 0x4e, 0x34, 0x3f, 0x41, 0xbf, 0x32, 0xf3, 0xf8, 0x45, 0xce, 0xda, 0xb4, 0x8c,
	0xda, 0xe8, 0x44, 0x74, 0xbf, 0x28, 0xad, 0x84, 0xaf, 0x32, 0x24, 0x25, 0x5f, 0xd3, 0x70, 0x96,
	0x7c, 0x8d, 0x93, 0x45, 0x5a, 0xf8, 0x3b, 0x28, 0xf5, 0x46, 0xe1, 0x71, 0x9e, 0x74, 0x62, 0xa6,
	0x34, 0xfd, 0x34, 0xa0, 0x20, 0xfe, 0x01, 0xf7, 0x0d, 0x4b, 0x89, 0x49, 0x93, 0xa1, 0xea, 0xc2,
	0x6b, 0xaf, 0xce, 0x62, 0x72, 0x85, 0x55, 0x3b, 0xfd, 0xc1, 0xbd, 0x79, 0x0a, 0x00, 0x00, 0xff,
	0xff, 0x26, 0xe6, 0xb7, 0x17, 0xf8, 0x04, 0x00, 0x00,
}
