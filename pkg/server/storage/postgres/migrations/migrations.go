// Code generated by go-bindata.
// sources:
// sql/001_add-initial-tbl.down.sql
// sql/001_add-initial-tbl.up.sql
// DO NOT EDIT!

package migrations

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __001_addInitialTblDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xc8\x4e\xad\xd4\x2b\x28\x4d\xca\xc9\x4c\x8e\xcf\x4e\xad\x8c\x4f\x49\x2d\x49\xcc\xcc\x51\x70\x76\x0c\x76\x76\x74\x71\xb5\xe6\x02\xab\x0c\x76\xf6\x70\xf5\x75\x04\x29\xb5\xe6\x02\x04\x00\x00\xff\xff\xad\x66\x95\xd3\x3b\x00\x00\x00")

func _001_addInitialTblDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTblDownSql,
		"001_add-initial-tbl.down.sql",
	)
}

func _001_addInitialTblDownSql() (*asset, error) {
	bytes, err := _001_addInitialTblDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tbl.down.sql", size: 59, mode: os.FileMode(420), modTime: time.Unix(1523419560, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var __001_addInitialTblUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\xd1\x4e\x83\x30\x18\x85\xef\x79\x8a\x73\x07\x4d\x88\x2f\xc0\x55\x65\xd5\x11\x59\xd1\x52\xd4\xe9\x05\x61\xa3\x9a\x66\x4b\x21\xec\x37\xa6\x3e\xbd\xc1\xe9\x30\x5b\xb8\x3d\xe7\xcf\x97\xef\xfc\xa9\x12\x5c\x0b\x94\xe9\x52\xac\x38\x76\xc6\x27\x41\xf0\x9b\x69\x7e\x9d\x8b\x31\xba\xea\x3f\x36\x7b\xbb\xad\x77\xc6\xd7\xad\xa1\xc6\xee\x11\x05\x00\x30\x74\x9f\xb5\x6d\x51\x0a\x95\xf1\x1c\xf7\x2a\x5b\x71\xb5\xc6\x9d\x58\xc7\x3f\x35\x0d\x8d\x3b\x34\x5b\xb2\x9d\xab\x7b\x33\xd8\xae\x85\x2e\xf5\x8b\xe2\xf2\x56\x40\x16\x1a\xb2\xca\x73\x2c\xc4\x0d\xaf\x72\x0d\x3a\xd0\xd7\xd0\xb8\x77\x13\xc9\xe2\x29\x62\x31\x42\xeb\xde\xac\xb3\xe4\xc3\x18\xe1\x2b\x0b\xd9\x91\x3a\xc9\x60\xe3\xc9\x34\x27\xd2\xb1\x36\x8e\x2c\xf9\x51\xeb\x91\xab\x74\xc9\xd5\x59\x3f\x8e\x20\xdf\x9b\x8b\x3a\x60\xd3\xf4\x4a\x66\x0f\x95\x40\x26\x17\xe2\x19\x17\xeb\xeb\x7f\x0a\x85\x9c\xfb\xd0\x14\xb1\xe4\x8f\x3b\x07\x9c\xa4\xe7\x79\xa7\x1b\x96\x04\xdf\x01\x00\x00\xff\xff\xec\xea\x9b\xf4\xb6\x01\x00\x00")

func _001_addInitialTblUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__001_addInitialTblUpSql,
		"001_add-initial-tbl.up.sql",
	)
}

func _001_addInitialTblUpSql() (*asset, error) {
	bytes, err := _001_addInitialTblUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "001_add-initial-tbl.up.sql", size: 438, mode: os.FileMode(420), modTime: time.Unix(1523419559, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"001_add-initial-tbl.down.sql": _001_addInitialTblDownSql,
	"001_add-initial-tbl.up.sql":   _001_addInitialTblUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"001_add-initial-tbl.down.sql": &bintree{_001_addInitialTblDownSql, map[string]*bintree{}},
	"001_add-initial-tbl.up.sql":   &bintree{_001_addInitialTblUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
